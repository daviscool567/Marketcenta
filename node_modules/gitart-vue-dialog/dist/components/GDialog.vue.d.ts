declare const _default: import("vue").DefineComponent<{
    background: {
        type: (StringConstructor | BooleanConstructor)[];
        default: boolean;
    };
    borderRadius: {
        type: (StringConstructor | NumberConstructor | BooleanConstructor)[];
        default: boolean;
    };
    contentClass: {
        type: StringConstructor;
        default: string;
    };
    /**
     * removes box-shadow for content
     */
    depressed: {
        type: BooleanConstructor;
        default: boolean;
    };
    fullscreen: {
        type: BooleanConstructor;
        default: boolean;
    };
    height: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    /**
     * enables local mode for the dialog.
     * dialog is fixed to first "position: relative;" parent
     */
    local: {
        type: BooleanConstructor;
        default: boolean;
    };
    maxWidth: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    overlayBackground: {
        type: (StringConstructor | BooleanConstructor)[];
        default: boolean;
    };
    /**
     * clicking outside content will not close modal
     */
    persistent: {
        type: BooleanConstructor;
        default: boolean;
    };
    scrollable: {
        type: BooleanConstructor;
        default: boolean;
    };
    transition: {
        type: StringConstructor;
        default: string;
    };
    width: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
}, {
    activatedOnce: import("vue").Ref<boolean>;
    activeZIndex: import("vue").ComputedRef<number>;
    isActive: import("vue").Ref<boolean>;
    deactivating: import("vue").Ref<boolean>;
    classes: import("vue").ComputedRef<(string | {
        'g-dialog-frame--active': boolean;
        'g-dialog-frame--fullscreen': boolean;
        'g-dialog-frame--local': boolean;
    })[]>;
    styles: import("vue").ComputedRef<{
        zIndex: number;
    }>;
    contentFrame: import("vue").Ref<Element | undefined>;
    overlay: import("vue").Ref<({
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            local: boolean;
        }> & Omit<Readonly<{
            active?: unknown;
            activeZIndex?: unknown;
            background?: unknown;
            deactivating?: unknown;
            local?: unknown;
        } & {
            active: boolean;
            activeZIndex: number;
            background: string | boolean;
            deactivating: boolean;
            local: boolean;
        } & {}> & {
            onClick?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "local">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: "click", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            active?: unknown;
            activeZIndex?: unknown;
            background?: unknown;
            deactivating?: unknown;
            local?: unknown;
        } & {
            active: boolean;
            activeZIndex: number;
            background: string | boolean;
            deactivating: boolean;
            local: boolean;
        } & {}> & {
            onClick?: ((...args: any[]) => any) | undefined;
        }, {
            styles: import("vue").ComputedRef<{
                zIndex: number;
            }>;
            classes: import("vue").ComputedRef<(string | {
                'g-dialog-overlay--active': boolean;
                'g-dialog-overlay--local': boolean;
            })[]>;
            computedBackground: import("vue").ComputedRef<string>;
            onClick: () => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], string, {
            local: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        active?: unknown;
        activeZIndex?: unknown;
        background?: unknown;
        deactivating?: unknown;
        local?: unknown;
    } & {
        active: boolean;
        activeZIndex: number;
        background: string | boolean;
        deactivating: boolean;
        local: boolean;
    } & {}> & {
        onClick?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{
        styles: import("vue").ComputedRef<{
            zIndex: number;
        }>;
        classes: import("vue").ComputedRef<(string | {
            'g-dialog-overlay--active': boolean;
            'g-dialog-overlay--local': boolean;
        })[]>;
        computedBackground: import("vue").ComputedRef<string>;
        onClick: () => void;
    }> & {} & {} & import("vue").ComponentCustomProperties) | undefined>;
    activatorAttrs: {
        onClick(): void;
    };
    onClickOutside: () => void;
    onClose: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:modelValue': (val: boolean) => true;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    background?: unknown;
    borderRadius?: unknown;
    contentClass?: unknown;
    depressed?: unknown;
    fullscreen?: unknown;
    height?: unknown;
    local?: unknown;
    maxWidth?: unknown;
    modelValue?: unknown;
    overlayBackground?: unknown;
    persistent?: unknown;
    scrollable?: unknown;
    transition?: unknown;
    width?: unknown;
} & {
    fullscreen: boolean;
    background: string | boolean;
    local: boolean;
    borderRadius: string | number | boolean;
    depressed: boolean;
    height: string | number;
    maxWidth: string | number;
    scrollable: boolean;
    width: string | number;
    contentClass: string;
    modelValue: boolean;
    overlayBackground: string | boolean;
    persistent: boolean;
    transition: string;
} & {}> & {
    "onUpdate:modelValue"?: ((val: boolean) => any) | undefined;
}, {
    fullscreen: boolean;
    background: string | boolean;
    local: boolean;
    borderRadius: string | number | boolean;
    depressed: boolean;
    height: string | number;
    maxWidth: string | number;
    scrollable: boolean;
    width: string | number;
    contentClass: string;
    modelValue: boolean;
    overlayBackground: string | boolean;
    persistent: boolean;
    transition: string;
}>;
export default _default;
//# sourceMappingURL=GDialog.vue.d.ts.map